enum UserRole {
  ADMIN
  SECURITY_OFFICER
}

enum Currency {
  GBP
  USD
  JPY
  EUR
  NZD
  CAD
}

enum BankStatus {
  Online
  Offline
}

enum BankStatus {
  Online
  Offline
}

type User {
  role: UserRole
  supportedCurrencies: [Currency]
}

type Bank {
  bankCheckCredentialsIssued: Boolean
  currency: Currency
  holdingBankDid: String
  holdingBankName: String
  iban: String
  isLiquidity: Boolean
  owningBankDid: String
  owningBankName: String
  participantCredentialsIssued: Boolean
  status: BankStatus
}

type ForeignBank {
  bankDid: String
  bankName: String
  currency: Currency
}

type BankSummary {
  country: String
  csleid: String
  name: String
}

type Country {
  code: String
  name: String
}

type BankPartner {
  holdingBankDid: String
  holdingBankName: String
  owningBankDid: String
  owningBankName: String
  iban: String
  currency: Currency
}

type Query {
  getBankSummaries(term: String!): [BankSummary]
  getCountries: [Country]
  getCurrentBank(bankDid: String!): Bank
  getForeignBanks(bankDid: String!, currency: String!): [ForeignBank]
  getBankPartners(
    bankDid: String!
    filter: String!
    offset: Int
    limit: Int
  ): [BankPartner]
  getTimezones: [String]
  getUser: User
}

type CreateBankPartnerResponse {
  status: String!
  conflictingFields: [String]
}

input BankPartnerInput {
  approvingBankDid: String!
  iban: String!
  requestingBankDid: String!
}

input CreateBankPartnerInput {
  currency: Currency!
  bankPartner: BankPartnerInput!
}

type Mutation {
  createBankPartner(values: CreateBankPartnerInput!): CreateBankPartnerResponse
}
